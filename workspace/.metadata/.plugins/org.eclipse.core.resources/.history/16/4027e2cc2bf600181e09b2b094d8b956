/**
 * @ (#) ServicioAutenticacionImpl.java
 * 
 * Clase que implementa la interfaz remota ServicioAutenticacionInterface.
 * Se encarga de registrar y de autenticar a los usuarios del sistema.
 *
 * @author Yassine Marroun Nettah
 * ymarroun1@alumno.uned.es
 */
package servidor;

import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Random;

import common.GUI;
import common.ServicioAutenticacionInterface;
import common.ServicioDatosInterface;
import common.UsuarioObj;


public class ServicioAutenticacionImpl extends UnicastRemoteObject implements ServicioAutenticacionInterface{

	//Identificadores de sesion
	private static final long serialVersionUID = 123711131719L;
	private int sesion = Math.abs(new Random().nextInt());
	private int puerto = 8816;
	private ServicioDatosInterface servicioDatos;
	
	/**
	 * Contructor necesario al extender UnicastRemoteOBject y poder utilizar Naming
	 * lo aprovecharemos tambien para buscar el almacen de datos
	 * @throws RemoteException
	 * @throws NotBoundException 
	 * @throws MalformedURLException 
	 */
	protected ServicioAutenticacionImpl() throws RemoteException, MalformedURLException, NotBoundException {
		super();

		//buscamos el objeto en el servidor gestor para autenticarnos
		String URLRegistro = "rmi://localhost:" + puerto + "/almacen";
		servicioDatos = (ServicioDatosInterface) Naming.lookup(URLRegistro);		
	}
	
	
	/**
	 * Solicita al Servicio de Datos el registro de un usuario
	 * @param UsuarioObj usuario, usuario con los datos a registrar
	 * @return int 0 si el registro ha sido correcto, int -1 si ya existe un usuario con el nick introducido
	 * @throws RemoteException
	 * @throws MalformedURLException 
	 * @throws NotBoundException 
	 */
	@Override
	public int registrarUsuario(UsuarioObj usuario) throws RemoteException, MalformedURLException, NotBoundException{
		int error = servicioDatos.registrarUsuario(usuario);
		switch (error){
		case 0 : GUI.imprime("Se ha creado correctamente su usuario, " + usuario.getNombre()); break;
		case -1  : GUI.imprime(usuario.getNombre() + ", ya existe un usuario con el NICK introducido."); break;
		}
		return error;
	}

	
	/**
	 * Solicita al Servicio de Datos la autenticacion de un usuario
	 * @param String nick, String password, datos del usuario que se quiere autenticar
	 * @return int el id sesion de cliente que se ha autenticado
	 * @throws RemoteException
	 * @throws MalformedURLException 
	 * @throws NotBoundException 
	 */
	@Override
	public int autenticarUsuario(String nick, String password) throws RemoteException, MalformedURLException, NotBoundException {		
		int error = servicioDatos.autenticarUsuario(nick, password);
		switch (error){
		case -2 : GUI.imprime("El usuario " + nick + " no esta registrado"); break;
		case -1 : GUI.imprime("Password incorrecto"); break;
		case 0  : GUI.imprime("Bienvenido " + nick); break;
		default : GUI.imprime("El cliente " + nick + " se ha autenticado como cliente en el sistema");break;
		}		
		return error;
	}


	
//////////////////////////////////////////////////////////////////////////////////////////////	
	
	/**
	 * registra un repositorio
	 * @String el nombre del repositorio
	 * @return int el id sesion del repositorio
	 */
	@Override
	public int registrarRepositorio(String nombre) throws RemoteException {
		int sesion = getSesion();
		int id = servicioDatos.registrarRepositorio(nombre,sesion);
		if (id != 0)
			GUI.imprime("La repo " + nombre + " se ha registrado en el sistema");
		else 
			GUI.imprime("Se ha intentado duplicar la repo " + nombre + ", se ha cancelado la operacion");
		return id;
	}

	/**
	 * solicita al Gestor la desconexion de un cliente
	 * @param sesion  int el id sesion del cliente a desconectar
	 */
	@Override
	public void desconectarCliente(int sesion) throws RemoteException {
//		String cliente = servicioDatos.desconectarCliente(sesion);
//		GUI.imprime("El cliente " + cliente + " se ha desconectado del sistema");	
	}

	/**
	 * solicita al Gestor la desconexion de una repo
	 * @param sesion int el id sesion de la repo a desconectar
	 */
	@Override
	public void desconectarRepositorio(int sesion) throws RemoteException { 
		String repo = servicioDatos.desconectarRepositorio(sesion);
		GUI.imprime("La repo " + repo + " se ha desconectado del sistema");		
	}

	
	/**
	 * devulve un id de sesion
	 * @return int un id sesion nuevo valido para cliente o repo
	 */
	//devuelve el contador de sesiones
	public int getSesion() {
		return ++sesion;
	}
}